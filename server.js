import express from "express";
import cors from "cors";
import nodemailer from "nodemailer";
import dns from "dns";

// --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–Ω–Ω–∏—Ö –ø–∞–¥–µ–Ω–∏–π –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç IPv4 (–Ω–∞ Render —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç) ---
console.log("üöÄ Booting BuyWay Mail backend...");
process.on("uncaughtException", (e) => console.error("Uncaught:", e));
process.on("unhandledRejection", (e) => console.error("Unhandled:", e));
dns.setDefaultResultOrder?.("ipv4first");

const app = express();

// --- CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥-–¥–æ–º–µ–Ω—ã –∏ –ª–æ–∫–∞–ª–∫—É ---
const allowed = [
  "https://buyway.su",
  "https://www.buyway.su",
  "http://localhost:5173",
  "http://localhost:3000",
];
app.use(
  cors({
    origin: (origin, cb) =>
      !origin || allowed.includes(origin) ? cb(null, true) : cb(new Error("Not allowed by CORS")),
  })
);
app.use(express.json());

// --- Healthchecks ---
app.get("/", (_, res) => res.send("OK"));
app.get("/healthz", (_, res) => res.status(200).send("ok"));

// --- –°–æ–∑–¥–∞–Ω–∏–µ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ Gmail (—è–≤–Ω–æ host/port/secure + —Ç–∞–π–º–∞—É—Ç—ã) ---
function makeGmailTransport({ port, secure }) {
  return nodemailer.createTransport({
    host: "smtp.gmail.com",
    port,          // 465 (TLS) –∏–ª–∏ 587 (STARTTLS)
    secure,        // 465 -> true, 587 -> false
    auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_PASS,
    },
    connectionTimeout: 20000,
    greetingTimeout: 20000,
    socketTimeout: 20000,
    tls: { servername: "smtp.gmail.com" },
  });
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: 465/TLS
let transporter = makeGmailTransport({ port: 465, secure: true });

// Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞: –µ—Å–ª–∏ 465 –Ω–µ –ø—Ä–æ—à—ë–ª, –ø—Ä–æ–±—É–µ–º 587/STARTTLS
async function sendMailWithFallback(options) {
  try {
    await transporter.sendMail(options);
  } catch (e) {
    console.error("MAIL ERROR primary (465):", e?.code || e?.message || e);
    const fallback = makeGmailTransport({ port: 587, secure: false });
    try {
      await fallback.verify();
    } catch (verr) {
      console.error("VERIFY 587:", verr?.code || verr?.message || verr);
    }
    await fallback.sendMail(options);
  }
}

// --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è SMTP ---
app.get("/diag/smtp", async (_, res) => {
  try {
    await transporter.verify();
    res.json({ ok: true, msg: "SMTP OK (465/TLS)" });
  } catch (e1) {
    console.error("VERIFY 465:", e1?.code || e1?.message || e1);
    const fallback = makeGmailTransport({ port: 587, secure: false });
    try {
      await fallback.verify();
      res.json({ ok: true, msg: "SMTP OK (587/STARTTLS)" });
    } catch (e2) {
      console.error("VERIFY 587:", e2?.code || e2?.message || e2);
      res.status(500).json({
        ok: false,
        error: `SMTP verify failed: 465: ${e1?.message || e1}; 587: ${e2?.message || e2}`,
      });
    }
  }
});

// --- –û—Å–Ω–æ–≤–Ω–æ–π API —Ä–æ—É—Ç: –ø—Ä–∏—ë–º —Ñ–æ—Ä–º—ã ---
app.post("/api/submit", async (req, res) => {
  const { name, contact, link, comment } = req.body || {};
  if (!name || !contact) {
    return res.status(400).json({ ok: false, error: "–ò–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const html = `
    <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ BuyWay</h2>
    <p><b>–ò–º—è:</b> ${name}</p>
    <p><b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact}</p>
    <p><b>–°—Å—ã–ª–∫–∞:</b> ${link || "‚Äî"}</p>
    <p><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment || "‚Äî"}</p>
    <p><i>${new Date().toLocaleString()}</i></p>
  `;

  try {
    await sendMailWithFallback({
      from: `"BuyWay Service" <${process.env.GMAIL_USER}>`,
      to: process.env.GMAIL_USER, // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏: "a@b.com, c@d.com"
      subject: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ BuyWay",
      html,
    });
    res.json({ ok: true });
  } catch (e) {
    console.error("MAIL ERROR final:", e);
    res.status(500).json({ ok: false, error: String(e?.message || e || "Mail send failed") });
  }
});

// --- –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Äa ---
const PORT = process.env.PORT || 10000; // –Ω–∞ Render PORT –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ env
app.listen(PORT, "0.0.0.0", () => console.log(`‚úÖ API listening on :${PORT}`));
